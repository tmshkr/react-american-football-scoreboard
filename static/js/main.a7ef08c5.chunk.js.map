{"version":3,"sources":["components/BottomRow.js","components/ScoreButton.js","App.js","serviceWorker.js","index.js"],"names":["memo","className","props","label","points","handleScore","team","onClick","App","useState","homeScore","setHomeScore","awayScore","setAwayScore","Date","now","startTime","timeString","setTimeString","useEffect","setInterval","dt","pad","n","getUTCMinutes","getUTCSeconds","getElapsedTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAyBeA,G,MAAAA,gBAvBG,WAChB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,QACA,yBAAKA,UAAU,eAAf,MAEF,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,SACA,yBAAKA,UAAU,eAAf,MAEF,yBAAKA,UAAU,UACb,wBAAIA,UAAU,iBAAd,WACA,yBAAKA,UAAU,iBAAf,OAEF,yBAAKA,UAAU,WACb,wBAAIA,UAAU,kBAAd,WACA,yBAAKA,UAAU,kBAAf,WCZOD,sBALf,SAAqBE,GAAQ,IACnBC,EAAqCD,EAArCC,MAAOC,EAA8BF,EAA9BE,OAAQC,EAAsBH,EAAtBG,YAAaC,EAASJ,EAATI,KACpC,OAAO,4BAAQC,QAAS,kBAAMF,EAAYC,EAAMF,KAAUD,MCsE7CK,MArEf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGqBJ,mBAASK,KAAKC,OAHnC,mBAGNC,EAHM,aAIuBP,mBAAS,UAJhC,mBAINQ,EAJM,KAIMC,EAJN,KAMb,SAASb,EAAYC,EAAMF,GACZ,SAATE,GAAiBK,EAAaD,EAAYN,GACjC,SAATE,GAAiBO,EAAaD,EAAYR,GAehD,OANAe,qBAAU,WACRC,aAAY,WACVF,EARJ,WACE,IAAMG,EAAK,IAAIP,KAAKA,KAAKC,MAAQC,GAC3BM,EAAM,SAAAC,GAAC,OAAKA,EAAI,GAAJ,WAAaA,GAAMA,GACrC,MAAM,GAAN,OAAUD,EAAID,EAAGG,iBAAjB,YAAqCF,EAAID,EAAGI,kBAK5BC,MACb,OACF,IAGD,yBAAKzB,UAAU,aACb,6BAASA,UAAU,cACjB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,cAAd,SACA,yBAAKA,UAAU,eAAeS,IAEhC,yBAAKT,UAAU,SAASgB,GACxB,yBAAKhB,UAAU,QACb,wBAAIA,UAAU,cAAd,UACA,yBAAKA,UAAU,eAAeW,KAGlC,kBAAC,EAAD,OAEF,6BAASX,UAAU,WACjB,kBAAC,EAAD,CACEE,MAAM,iBACNC,OAAQ,EACRE,KAAK,OACLD,YAAaA,IAEf,kBAAC,EAAD,CACEF,MAAM,kBACNC,OAAQ,EACRE,KAAK,OACLD,YAAaA,IAEf,kBAAC,EAAD,CACEF,MAAM,iBACNC,OAAQ,EACRE,KAAK,OACLD,YAAaA,IAEf,kBAAC,EAAD,CACEF,MAAM,kBACNC,OAAQ,EACRE,KAAK,OACLD,YAAaA,OCvDHsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a7ef08c5.chunk.js","sourcesContent":["import React, { memo } from \"react\";\n\nconst BottomRow = () => {\n  return (\n    <div className=\"bottomRow\">\n      <div className=\"down\">\n        <h3 className=\"down__title\">Down</h3>\n        <div className=\"down__value\">3</div>\n      </div>\n      <div className=\"toGo\">\n        <h3 className=\"toGo__title\">To Go</h3>\n        <div className=\"toGo__value\">7</div>\n      </div>\n      <div className=\"ballOn\">\n        <h3 className=\"ballOn__title\">Ball on</h3>\n        <div className=\"ballOn__value\">21</div>\n      </div>\n      <div className=\"quarter\">\n        <h3 className=\"quarter__title\">Quarter</h3>\n        <div className=\"quarter__value\">4</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BottomRow);\n","import React, { memo } from \"react\";\n\nfunction ScoreButton(props) {\n  const { label, points, handleScore, team } = props;\n  return <button onClick={() => handleScore(team, points)}>{label}</button>;\n}\n\nexport default memo(ScoreButton);\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport BottomRow from \"./components/BottomRow\";\nimport ScoreButton from \"./components/ScoreButton\";\n\nfunction App() {\n  const [homeScore, setHomeScore] = useState(0);\n  const [awayScore, setAwayScore] = useState(0);\n  const [startTime, setStartTime] = useState(Date.now());\n  const [timeString, setTimeString] = useState(\"00:00\");\n\n  function handleScore(team, points) {\n    if (team === \"home\") setHomeScore(homeScore + points);\n    if (team === \"away\") setAwayScore(awayScore + points);\n  }\n\n  function getElapsedTime() {\n    const dt = new Date(Date.now() - startTime);\n    const pad = n => (n < 10 ? `0${n}` : n);\n    return `${pad(dt.getUTCMinutes())}:${pad(dt.getUTCSeconds())}`;\n  }\n\n  useEffect(() => {\n    setInterval(() => {\n      setTimeString(getElapsedTime());\n    }, 1000);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <section className=\"scoreboard\">\n        <div className=\"topRow\">\n          <div className=\"home\">\n            <h2 className=\"home__name\">Lions</h2>\n            <div className=\"home__score\">{homeScore}</div>\n          </div>\n          <div className=\"timer\">{timeString}</div>\n          <div className=\"away\">\n            <h2 className=\"away__name\">Tigers</h2>\n            <div className=\"away__score\">{awayScore}</div>\n          </div>\n        </div>\n        <BottomRow />\n      </section>\n      <section className=\"buttons\">\n        <ScoreButton\n          label=\"Home Touchdown\"\n          points={7}\n          team=\"home\"\n          handleScore={handleScore}\n        />\n        <ScoreButton\n          label=\"Home Field Goal\"\n          points={3}\n          team=\"home\"\n          handleScore={handleScore}\n        />\n        <ScoreButton\n          label=\"Away Touchdown\"\n          points={7}\n          team=\"away\"\n          handleScore={handleScore}\n        />\n        <ScoreButton\n          label=\"Away Field Goal\"\n          points={3}\n          team=\"away\"\n          handleScore={handleScore}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}